imports:
    - { resource: '../../../../symplify/easy-coding-standard/config/set/php70.yaml' }
    - { resource: '../../../../symplify/easy-coding-standard/config/set/php71.yaml' }
    - { resource: '../../../../symplify/easy-coding-standard/config/set/common.yaml' }
    - { resource: '../../../../symplify/easy-coding-standard/config/set/clean-code.yaml' }
    - { resource: '../../../../symplify/easy-coding-standard/config/set/dead-code.yaml' }
    - { resource: '../../../../symplify/easy-coding-standard/config/set/symfony.yaml' }
    - { resource: '../../../../symplify/easy-coding-standard/config/set/symfony-risky.yaml' }

parameters:
    skip:
        # We allow assignments in conditions (see common.yaml)
        PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\AssignmentInConditionSniff: ~

        # We do not want explicit variables (see common.yaml)
        PhpCsFixer\Fixer\LanguageConstruct\ExplicitIndirectVariableFixer: ~
        PhpCsFixer\Fixer\StringNotation\ExplicitStringVariableFixer: ~

        # We do not want a space after the ! operator (see common.yaml)
        PhpCsFixer\Fixer\Operator\NotOperatorWithSuccessorSpaceFixer: ~

        # We allow assertEquals() to compare objects (see phpunit.yaml)
        PhpCsFixer\Fixer\PhpUnit\PhpUnitStrictFixer: ~

        # We do not want to use Throwable everywhere (see php70.yaml)
        SlevomatCodingStandard\Sniffs\Exceptions\ReferenceThrowableOnlySniff: ~

        # We do not require null default values to be nullable (see php71.yaml)
        SlevomatCodingStandard\Sniffs\TypeHints\NullableTypeForNullDefaultValueSniff: ~

    line_ending: "\n"

services:
    PhpCsFixer\Fixer\Comment\HeaderCommentFixer:
        header: "This file is part of Contao.\n\n(c) Leo Feyer\n\n@license LGPL-3.0-or-later"

    PhpCsFixer\Fixer\ConstantNotation\NativeConstantInvocationFixer:
        scope: namespaced
        fix_built_in: false
        include:
            - DIRECTORY_SEPARATOR
            - PHP_SAPI
            - PHP_VERSION_ID

    PhpCsFixer\Fixer\FunctionNotation\FopenFlagsFixer:
        b_mode: false

    PhpCsFixer\Fixer\FunctionNotation\NativeFunctionInvocationFixer:
        scope: namespaced
        strict: true
        include:
            - '@@compiler_optimized'

    PhpCsFixer\Fixer\Semicolon\MultilineWhitespaceBeforeSemicolonsFixer:
        strategy: new_line_for_chained_calls

    # We do not enforce blank lines before "break", "continue" and "yield"
    PhpCsFixer\Fixer\Whitespace\BlankLineBeforeStatementFixer:
        statements:
            - case
            - declare
            - default
            - do
            - for
            - foreach
            - if
            - return
            - switch
            - throw
            - try
            - while

    PhpCsFixer\Fixer\PhpUnit\PhpUnitTestCaseStaticMethodCallsFixer:
        call_type: this

    # Add fixers from PHP-CS-Fixer
    PhpCsFixer\Fixer\Alias\SetTypeToCastFixer: ~
    PhpCsFixer\Fixer\Casing\LowercaseStaticReferenceFixer: ~
    PhpCsFixer\Fixer\Casing\MagicMethodCasingFixer: ~
    PhpCsFixer\Fixer\Casing\NativeFunctionTypeDeclarationCasingFixer: ~
    PhpCsFixer\Fixer\CastNotation\NoUnsetCastFixer: ~
    PhpCsFixer\Fixer\ClassNotation\NoNullPropertyInitializationFixer: ~
    PhpCsFixer\Fixer\Comment\MultilineCommentOpeningClosingFixer: ~
    PhpCsFixer\Fixer\ControlStructure\IncludeFixer: ~
    PhpCsFixer\Fixer\ControlStructure\NoAlternativeSyntaxFixer: ~
    PhpCsFixer\Fixer\ControlStructure\NoSuperfluousElseifFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\CombineNestedDirnameFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\FopenFlagOrderFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\ImplodeCallFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\NoUnreachableDefaultArgumentValueFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\SingleLineThrowFixer: ~
    PhpCsFixer\Fixer\FunctionNotation\StaticLambdaFixer: ~
    PhpCsFixer\Fixer\Import\FullyQualifiedStrictTypesFixer: ~
    PhpCsFixer\Fixer\Import\SingleImportPerStatementFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\CombineConsecutiveIssetsFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\CombineConsecutiveUnsetsFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\ErrorSuppressionFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\NoUnsetOnPropertyFixer: ~
    PhpCsFixer\Fixer\Operator\LogicalOperatorsFixer: ~
    PhpCsFixer\Fixer\Phpdoc\AlignMultilineCommentFixer: ~
    PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocOrderFixer: ~
    PhpCsFixer\Fixer\Phpdoc\PhpdocVarAnnotationCorrectOrderFixer: ~
    PhpCsFixer\Fixer\PhpTag\LinebreakAfterOpeningTagFixer: ~
    PhpCsFixer\Fixer\PhpTag\NoShortEchoTagFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitDedicateAssertInternalTypeFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitExpectationFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitMockFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitMockShortWillReturnFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitNamespacedFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitNoExpectationAnnotationFixer: ~
    PhpCsFixer\Fixer\PhpUnit\PhpUnitOrderedCoversFixer: ~
    PhpCsFixer\Fixer\ReturnNotation\NoUselessReturnFixer: ~
    PhpCsFixer\Fixer\StringNotation\EscapeImplicitBackslashesFixer: ~
    PhpCsFixer\Fixer\StringNotation\HeredocToNowdocFixer: ~
    PhpCsFixer\Fixer\StringNotation\NoBinaryStringFixer: ~
    PhpCsFixer\Fixer\StringNotation\SimpleToComplexStringVariableFixer: ~
    PhpCsFixer\Fixer\StringNotation\StringLineEndingFixer: ~

    # Add sniffs from https://github.com/slevomat/coding-standard
    SlevomatCodingStandard\Sniffs\TypeHints\DisallowArrayTypeHintSyntaxSniff: ~

    # Add custom fixers
    Contao\EasyCodingStandard\Fixer\AssertEqualsFixer: ~
    Contao\EasyCodingStandard\Fixer\ExpectsWithCallbackFixer: ~
    Contao\EasyCodingStandard\Fixer\InlinePhpdocCommentFixer: ~
    Contao\EasyCodingStandard\Fixer\IsArrayNotEmptyFixer: ~
    Contao\EasyCodingStandard\Fixer\MockMethodChainingIndentationFixer: ~
    Contao\EasyCodingStandard\Fixer\MultiLineIfIndentationFixer: ~
    Contao\EasyCodingStandard\Fixer\MultiLineLambdaFunctionArgumentsFixer: ~
    Contao\EasyCodingStandard\Fixer\NoExpectsThisAnyFixer: ~
    Contao\EasyCodingStandard\Fixer\NoLineBreakBetweenMethodArgumentsFixer: ~
    Contao\EasyCodingStandard\Fixer\SingleLineConfigureCommandFixer: ~
    Contao\EasyCodingStandard\Sniffs\ContaoFrameworkClassAliasSniff: ~
    Contao\EasyCodingStandard\Sniffs\SetDefinitionCommandSniff: ~
